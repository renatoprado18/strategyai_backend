name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting tools
        run: |
          pip install black flake8

      - name: Check formatting with Black
        run: |
          black --check app/ tests/ scripts/ --line-length 120

      - name: Lint with flake8
        run: |
          flake8 app/ tests/ scripts/ --max-line-length=120 --ignore=E501,W503,E203
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install safety

      - name: Run security scan
        run: |
          safety check --json || true
        continue-on-error: true

      - name: Check for hardcoded secrets
        run: |
          # Simple grep for common secret patterns
          ! grep -r "sk-or-v1-" app/ tests/ || echo "WARNING: Possible API key found"
          ! grep -r "password.*=" app/ tests/ || echo "WARNING: Possible password found"

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short --cov=app --cov-report=term-missing
        env:
          # Mock environment variables for testing
          SUPABASE_URL: "https://mock.supabase.co"
          SUPABASE_SERVICE_KEY: "mock_key"
          UPSTASH_REDIS_URL: "redis://mock:6379"
          UPSTASH_REDIS_TOKEN: "mock_token"
          OPENROUTER_API_KEY: "sk-or-v1-mock"
          JWT_SECRET: "test_secret_key_for_ci"
          ALLOWED_ORIGINS: "http://localhost:3000"

  validate:
    name: Pre-Deploy Validation
    runs-on: ubuntu-latest
    needs: [lint, security, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run pre-deployment checks
        run: |
          python scripts/pre_deploy_check.py
        env:
          CI: "true"
          SUPABASE_URL: "https://mock.supabase.co"
          SUPABASE_SERVICE_KEY: "mock_key"
          UPSTASH_REDIS_URL: "redis://mock:6379"
          UPSTASH_REDIS_TOKEN: "mock_token"
          OPENROUTER_API_KEY: "sk-or-v1-mock"
          JWT_SECRET: "test_secret_key_for_ci"
          ALLOWED_ORIGINS: "http://localhost:3000"

      - name: Check critical files exist
        run: |
          test -f app/main.py || exit 1
          test -f app/core/database.py || exit 1
          test -f app/routes/submissions.py || exit 1
          test -d migrations/ || exit 1
          echo "‚úÖ All critical files present"

      - name: Verify migrations are numbered
        run: |
          ls migrations/*.sql | sort -V
          echo "‚úÖ Migrations verified"

  deploy-notification:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment status
        run: |
          echo "‚úÖ All checks passed!"
          echo "üöÄ Railway will auto-deploy this commit"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üí¨ Message: ${{ github.event.head_commit.message }}"

      - name: Wait for Railway deployment
        run: |
          echo "‚è≥ Waiting 60 seconds for Railway to deploy..."
          sleep 60

  smoke-test:
    name: Post-Deploy Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-notification]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install test dependencies
        run: |
          pip install httpx pytest pytest-asyncio

      - name: Run smoke tests
        run: |
          python scripts/smoke_test.py
        env:
          RAILWAY_URL: ${{ secrets.RAILWAY_URL }}
        continue-on-error: true

      - name: Smoke test summary
        run: |
          echo "üß™ Smoke tests completed"
          echo "üìù Check logs above for results"

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, security, test, validate]
    if: always()

    steps:
      - name: Check pipeline status
        run: |
          echo "Pipeline Summary:"
          echo "=================="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Validation: ${{ needs.validate.result }}"

          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "‚ùå Tests failed - deployment blocked"
            exit 1
          fi

          if [ "${{ needs.validate.result }}" != "success" ]; then
            echo "‚ùå Validation failed - deployment blocked"
            exit 1
          fi

          echo "‚úÖ Pipeline passed - safe to deploy"
